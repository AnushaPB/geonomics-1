.. role:: py(code)
      :language: python

.. role:: bash(code)
      :language: bash


*********
Functions
*********

.. function:: make_parameters_file([filepath=None, layers=1, species=1,
                                       data=None, stats=None])
 
   
   Create a new parameters file.
   
   Write to disk a new, template parameters file. The file will contain the
   numbers and types of sections indicated by the parameters fed to this
   function. It can often be used 'out of the box' to make a new Model
   object, but typically it will be edited by the user to stipulate
   the scenario being simulated, then used to instantiate a Model.
   
   ----------
   Parameters
   ----------
   filepath : str, optional
       Where to write the resulting parameters file, in /path/to/filename.py
       format. Defaults to None. If None, a file named
       "GNX_params_<datetime>.py" will be written to the working
       directory.
   layers : {int, list of dicts}, optional
       Number (and optionally, types) of Layer-parameter sections to include
       in the parameters file that is generated. Defaults to 1. Valid values
       and their associated behaviors are:
   
       int:
           Add sections for the stipulated number of Layers, each with default
           settings:
           
             - parameters for creating Layers of type 'random' (i.e.
               Layers that will be generated by interpolation from
               randomly valued random points)
             - no LayerChanger parameters
   
       [dict, ..., dict]:
           Each dict in this list should be of the form:
   
           {'type':    'random', 'defined', 'file', or 'nlmpy',
   
           'change':   bool
   
           }
   
           This will add one section of Layer parameters, with the
           contents indicated, for each dict in this list.
   species : {int, list of dicts}, optional
       Number (and optionally, types) of Species-parameter sections to
       include in the parameters file that is generated. Defaults to 1. Valid
       values and their associated behaviors are:
   
       int:
           Add sections for the stipulated number of Species, each with
           default settings:
   
             - parameters for movement without a MovementSurface
             - parameters for a GenomicArchitecture with 0 Traits (i.e. with
               only neutral loci)
             - no SpeciesChanger parameters
   
       [dict, ..., dict]:
           Each dict should contain at least one argument from among the
           following:
           {'movement':                       bool,
           'movement_surface':                bool,
           'genomes':                         {bool, 'custom'},
           'n_traits':                        int,
           'demographic_change':              int,
           'parameter_change':                bool
           }
           This will add one section of Species parameters, customized
           as indicated, for each dict in the list. (Note that if the
           'genomes' argument is True or 'custom', a section for
           parameterization of the genomic architecture will be added,
           but if it is 'custom' then a template custom genomic architecture
           file will also be created (a CSV file), which can be filled in
           to stipulate the locus-wise values for starting allele frequency,
           recombination rate, dominance, associated traits, and effect
           sizes.)
   
   data : bool, optional
       Whether to include a Data-parameter section in the parameters file that
       is generated. Defaults to None. Valid values and their associated
       behaviors are:
   
       None, False:
           Will not add a section for parameterizing data to be collected.
           No DataCollector will be created for the Model object made from
           the resulting parameters file, and no data will be collected
           during the model runs.
       True:
           Will add a section that can be used to parameterize which
           data will be collected during the model runs, when, and what
           file formats will be used to write it to disk.
           (This which will be managed by the model's DataCollector
           object.)
   
   stats : bool, optional
       Whether to include a Stats-parameter section in the parameters file that
       is generated. Defaults to None. Valid values and their associated
       behaviors are:
   
       None, False:
           Will not add a section for parameterizing the statistics to be
           calculated. No StatsCollector will be created for the Model
           object made from the resulting parameters file, and no
           statistics will be calculated during the model runs.
       True:
           Will add a section that can be used to parameterize which
           statistics will be calculated during the model runs, and when.
           (This will be managed by the model's StatsCollector object.)
   
   -------
   Returns
   -------
   out : None
       Returns no output. Resulting parameters file will be written to the
       location and filename indicated (or by default, will be written to a
       file named "GNX_params_<datetime>.py" in the working directory).
   
   --------
   See Also
   --------
   sim.params.make_parameters_file
   
   -----
   Notes
   -----
   All parameters of this function are optional. Calling the function without
   providing any parameters will always produce the parameters file for the
   default model scenario. This file can be instantiated as a Model object and
   run without being edited. Those three steps (create default parameters file;
   create model from that parameters file; run the model) serve as a base case
   to test successful package installation, and are wrapped around by the
   convenience function `gnx.run_default_model`.
   
   --------
   Examples
   --------
   In the simplest example, we can create a parameters file for the default
   model. Then (assuming it is the only Geonomics parameters file in the
   current working directory, so that it can be unambiguously identified) we
   can call the gnx.make_model function to create a Model object from that
   file, and then call the Model.run method to run the model (setting the
   'verbose' parameter to True, so that we can observe model output).
   
   >>> gnx.make_parameters_file()
   >>> mod = gnx.make_model()
   >>> mod.run(verbose = True)
   TODO: PUT TYPICAL MODEL OUTPUT HERE, EVEN THOUGH IT'S ONLY PRINTED?
   
   We can use some of the function's arguments, to create a parameters
   file for a model with 3 Layers and 1 Species (all with the default
   components for their sections of the parameters file) and with a section
   for parameterizing data collection.
   
   >>> gnx.make_parameters_file(scapes = 3, data = True)
   
   As a more complex example that is likely to be similar to most use cases,
   we can create a parameters file for a model scenario with:
   
       - 2 Layers (one being an nlmpy Layer that will not change over model
         time, the other being a raster read in from a GIS file and being
         subject to change over model time);
       - 2 Species (the first having genomes, 2 Traits, and movement
         that is dictated by a MovementSurface; the second not having
         genomes but having a MovementSurface as well, and undergoing
         demographic change)
       - data-collection;
       - stats-collection;
   
   We can save this to a file named "2-spp_2-trait_model.py" in our current
   working directory.
   
   >>> gnx.make_parameters_file(
   >>>     #list of 2 dicts, each containing the values for each Layer's
   >>>     #parameters section
   >>>     scapes = [
   >>>         {'type': 'nlmpy'},                              #scape 1 
   >>>         {'type': 'gis',                                 #scape 2 
   >>>          'change': True}
   >>>         ],
   >>>     #list of 2 dicts, each containing the values for each Species'
   >>>     #parameters section
   >>>     species = [
   >>>         {'genomes': True,                               #spp 1
   >>>          'n_traits': 2,
   >>>          'movement': True,
   >>>          'movement_surface': True},
   >>>         {'genomes': False,                              #spp 2
   >>>          'movement': True,
   >>>          'movement_surface': True,
   >>>          'demographic_change': True}
   >>>         ],
   >>>     #arguments to the data and stats parameters
   >>>     data = True, stats = True, 
   >>>     #destination to which to write the resulting parameter file
   >>>     filepath = '2-spp_2-trait_model.py')
   
   
.. function:: read_parameters_file(filepath)
   
   
   
   Create a new ParametersDict object.
   
   Read the Geonomics parameters file saved at the location indicated by
   'filepath', check its validity (i.e. that all the Layers and Species
   parameterized in that file have been given distinct names), then use the
   file to instantiate a ParametersDict object.
   
   ----------
   Parameters
   ----------
   filepath : str
       String indicating the location of the Geonomics parameters file that
       should be made into a ParametersDict object.
   
   -------
   Returns
   -------
   
   An object of the ParametersDict class (a dict of nested dicts, all
   of which have key-value pairs whose values can be accessed using typical
   dict notation or using dot notation with the keys).
   
   ------
   Raises
   ------
   AssertionError
       If either the Layers or the Species parameterized in the parameters
       file have not all been given distinct names
   
   --------
   See Also
   --------
   sim.params.read
   sim.params.ParametersDict
   
   --------
   Examples
   --------
   Read a parameters file called "null_model.py" (located in the current
   working directory).
   
   >>> gnx.read_parameters_file('null_model.py')
   <class 'sim.params.ParametersDict'>
   Model name:                                     GNX_params_13-10-2018_15:54:03
   


.. function:: make_model(parameters)

   Create a new Model object.
   
   Use either a ParametersDict object or the path to a valid Geonomics
   parameters file (whichever is provided to the 'parameters' argument) to
   create a new Model object.
   
   ----------
   Parameters
   ----------
   parameters : {ParametersDict, str}, optional
       The parameters to be used to make the Model object.
       If `parameters` is a ParametersDict object, the object will be used to
       make the Model.
       If `parameters` is a string, Geonomics will call
       `gnx.read_parameters_file` to make a ParametersDict object, then use
       that object to make the Model.
       If `parameters` is None, or is not provided, then Geonomics will
       attempt to find a single parameters file in the current working
       directory with the filename "GNX_params_<...>.py", will use that
       file to make a ParametersDict object, then will use that object to
       make the Model.
   
   -------
   Returns
   -------
   out : Model
       An object of the Model class
   
   ------
   Raises
   ------
   ValueError
       If the `parameters` argument was not provided and a single, valid
       Geonomics parameters file could not be identified in the current
       working directory
   ValueError
       If the `parameters` arugment was given a string that does not point
       to a valid parameters file
   ValueError
       If the ParametersDict provided to the `parameters` argument, or created
       from the parameters file being used, cannot be successfully made into a
       Model
   
   --------
   See Also
   --------
   gnx.read_parameters_file
   sim.model.Model
   
   --------
   Examples
   --------
   Make a Model from a single, valid "GNX_params_<...>.py" file that can
   be found in the current working directory (such as a file that would be
   produced by calling gnx.make_parameters_file without any arguments).
   
   >>> gnx.make_model()
   <class 'sim.model.Model'>
   Model name:                                     GNX_params_13-10-2018_15:54:03
   Layers:                                         0: '0'
   Species:                                        0: '0'
   Number of iterations:                           1
   Number of burn-in timesteps (minimum):          30
   Number of main timesteps:                       100
   Geo-data collected:                             {}
   Gen-data collected:                             {}
   Stats collected:                                {}
   
   
   Make a Model from a file called 'null_model.py', in the current working
   directory.
   
   >>> gnx.make_model('null_model.py')
   <class 'sim.model.Model'>
   Model name:                                     null_model
   Layers:                                         0: 'tmp'
                                                   1: 'ppt'
   Species:                                        0: 'C. fasciata'
   Number of iterations:                           2500
   Number of burn-in timesteps (mininum):          100
   Number of main timesteps:                       1000
   Geo-data collected:                             {csv, geotiff}
   Gen-data collected:                             {vcf, fasta}
   Stats collected:                                {maf, ld, mean_fit, het, Nt}
