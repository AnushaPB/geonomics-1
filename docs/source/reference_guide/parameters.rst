.. toctree::
   :maxdepth: 2

   parameters/landscape_parameters
   parameters/community_and_species_parameters
   parameters/other_parameters
   functions
   classes



Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`



.. role:: py(code)
      :language: python

.. role:: bash(code)
      :language: bash


**********
Parameters
**********

In order to create and run a Geonomics :py:`Model`, you will need a valid
Geonomics parameters file. No worry though -- this is very easy to create!
To generate a new, template parameters file, you will simply call the
:py:`gnx.make_parameters_file` function, feeding it the appropriate
arguments (to indicate how many :py:`Species` and :py:`Layer`\s you
want to include in your :py:`Model`; which parameters sections you want
included in the file, both for those
:py:`Layer`\s and :py:`Species` and for
other components of the :py:`Model`; and the path and filename for your new
parameters file). Geonomics will then automatically create the file for you, 
arranged as you requested and saved where you requested.

When you then open that file, you will see the following:

.. code-block:: python

  #<your_filename>.py

  #This is a default parameters file generated by Geonomics
  #(by the gnx.params.make_parameters_file() function).


                   #   ::::::          :::    :: :::::::::::#
             #::::::    ::::   :::      ::    :: :: ::::::::::: ::#
          #:::::::::     ::            ::   :::::::::::::::::::::::::#
        #::::::::::                      :::::::::: :::::: ::::::::  ::#
      #  : ::::  ::                    ::::  : ::    :::::::: : ::  :    #
     # GGGGG :EEEE: OOOOO   NN   NN   OOOOO   MM   MM IIIIII  CCCCC SSSSS #
    # GG     EE    OO   OO  NNN  NN  OO   OO  MM   MM   II   CC     SS     #
    # GG     EE   OO     OO NN N NN OO     OO MMM MMM   II   CC     SSSSSS #
    # GG GGG EEEE OO     OO NN  NNN OO     OO MM M MM   II   CC         SS #
    # GG   G EE    OO   OO  NN   NN  OO   OO  MM   MM   II   CC        SSS #
     # GGGGG :EEEE: OOOOO   NN   NN   OOOOO   MM   MM IIIIII  CCCCC SSSSS #
      #    : ::::::::               :::::::::: ::              ::  :   : #
        #:    :::::                    :::::: :::             :::::::  #
          #    :::                      :::::  ::              ::::: #
             #  ::                      ::::                      #
                   # ::                                     #
 
 
  params = {
  
  ##############
  #### LAND ####
  ##############
      'land': {
  
      ##############
      #### main ####
      ##############
          'main': {
              # y,x (a.k.a. i,j) dimensions of the Landscape
              'dim':                      (20,20),

     #.
     #.
     #.

This is the beginning of a file that is really just a long but simple Python
script (hence the '.py' extension); this whole file just defines a single,
long, nested :py:`dict` (i.e. a Python 'dictionary') containing all of your
parameter values. It may look like a lot, but don't be concerned! For two
reasons:

  1. All the hard work is already done for you. You'll just need to change
     the default values where and how you want to, to set up your particular
     simulation scenario.
  2. You will probably leave a good number of the parameters defined in this
     file untouched. Geonomics does its best to set sensible default values
     for all its parameters. Though of course, you'll want to think clearly 
     nonetheless about whether the default value for each parameter 
     is satisfactory for your purposes.

Each parameter in the parameters value is preceded by a terse comment, to
remind you what the parameter does. But for detailed information about each
parameter, you'll want to refer to the following information.
What follows is a list of all of the Geonomics parameters (in the sections and
the top-to-bottom order in which they'll appear in your parameters files).
For each parameter, you will see a section with the following information:

  - a snippet of the context (i.e. lines of
    Python code) in which it appears in a parameters file; 
  - the valid Python data type(s) the parameter can take
  - the default value of the parameter
  - a ranking score, indicating how likely it is that you will want to reset
    this parameter (i.e. change it from its default value), and
    encoded as follows:

    - 'Y': almost certainly, *or* must be reset for your :py:`Model` to run
    - 'P': it is quite possible that you will want to reset this
      parameter, but this will depend on your use and scenario
    - 'N': almost certainly not, *or* no need to reset because it should be
      set intelligently anyhow (Note: this does *not* mean that you cannot
      reset the parameter! if that is the case for any value then it does not
      appear in the parameters file)

  - other relevant, detailed information about the parameter, including
    an explanation of what it defines, how its value is used, where to look
    for additioanl information about parameters related to other Python 
    packages, etcetera
   

These section will be formatted as follows:


**<param_name>**

.. code-block:: python

              #brief comment about the parameter
              '<param_name>':               <default_param_value>,

<valid Python data type(s)>

default: <default value>

reset? <ranking>

  <Explanation of what the parameter defines, how its value is used,
  and any other relevant information.>


This section should serve as your primary point of reference
if you confront any uncertainty while creating your own parameters files.
We'll start with the section of parameters that
pertains to the :py:`Landscape` object.
Documentation for all Geonomics parameters
==========================================


.. role:: py(code)
      :language: python

.. role:: bash(code)
      :language: bash



