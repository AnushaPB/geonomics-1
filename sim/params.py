#!/usr/bin/python
#params.py

'''
##########################################

Module name:              sim.params

Module contents:          - definition of the parameters-file strings
                          - definition of the _DynAttrDict and ParametersDict
                            classes
                          - definiton of functions for making and reading
                            params files

Author:                   Drew Ellison Hart
Email:                    drew.hart@berkeley.edu
Github:                   URL
Start date:               09-10-18
Documentation:            URL

##########################################
'''

#geonomics imports
from utils import _str_repr_ as _sr_

#other imports
import os, time, datetime
import numpy as np
import pandas as pd
import copy
import re


######################################
# -----------------------------------#
# VARIABLES -------------------------#
# -----------------------------------#
######################################

    ##################
    # params strings #
    ##################

#main text-block
#STRING SLOTS:
    #%s = layers_params,
    #%s = pops_params,
    #%s = its_params,
    #%s = data_params,
    #%s = stats_params,
PARAMS = '''#%s

#This is a default parameters file generated by Geonomics
#(by the gnx.params.make_parameters_file() function).


                      ## :: ::    :::            ##
                ##:::   :::::    :::   ::    :: :: :::##
             ## ::::     ::           ::   ::::::::::::::##
           ##::::::                       ::::::::: :::::: :##
         ## :    :::                    :::    ::    :::::::::##
        ##ggggg eeee ooo   n   n   ooo   m   m iiiii  cccc ssss##
       ##g     e    o   o  nn  n  o   o  m   m   i   c     s    ##
       ##g     eee o     o n n n o     o mm mm   i   c     sssss##
       ##g ggg eee o     o n  nn o     o m m m   i   c         s##
       ##g   g e    o   o  n   n  o   o  m   m   i   c        ss##
        ##gggg  eeee ooo   n   n   ooo   m   m iiiii  cccc ssss##
         ##  ::::::::        ::::::::::::  :       ::  ::   : ##
           ##  ::::              :::::::  ::     ::::::::  :##
             ## :::               :::::: ::       ::::::  ##
                ##:                ::::                ##
                      ##                         ##


#NOTE: GET RID OF THIS SOON!
import numpy as np

params = {
###############################################################################

###################
#### LANDSCAPE ####
###################
    'landscape': {

    ##############
    #### main ####
    ##############
        'main': {
            #dimensions of the Landscape
            'dim':                      (20,20),
            #resolution of the Landscape
            'res':                      (1,1),
            #upper-left corner of the Landscape
            'ulc':                      (0,0),
            #projection of the Landscape
            'prj':                      None,
            }, # <END> 'main'

    ################
    #### layers ####
    ################
        'layers': {
%s


    #### NOTE: Individual Layers' sections can be copy-and-pasted (and
    #### assigned distinct keys and names), to create additional Layers.


            } # <END> 'layers'

        }, # <END> 'landscape'


###############################################################################

###################
#### COMMUNITY ####
###################
    'comm': {

        'pops': {
%s


    #### NOTE: Individual Populations' sections can be copy-and-pasted (and
    #### assigned distinct keys and names), to create additional Populations.


            }, # <END> 'pops'

        }, # <END> 'comm'


###############################################################################

###############
#### MODEL ####
###############
    'model': {
        #total Model runtime (in timesteps)
        'T':            100,
        #min burn-in runtime (in timesteps)
        'burn_T':       30,
        #seed number
        'num':          None,
%s
%s
%s
        } # <END> 'model'

    } # <END> params
'''

#block for lyr params
#STRING SLOTS: 
    #%s = lyr_name,
    #%i = lyr_num,
    #%s = lyr_type_params,
    #%s = lyr_change_params,
    #%i = lyr_num,
LYR_PARAMS = '''
            #layer name (LAYER NAMES MUST BE UNIQUE!)
            %s: {

        #######################################
        #### layer num. %i: init parameters ####
        #######################################

                #initiating parameters for this layer
                'init': {
%s
                    }, # <END> 'init'
%s
                }, # <END> layer num. %i
'''

#the block of random-layer parameters
RAND_LYR_PARAMS = '''
                    #parameters for a 'random'-type Layer
                    'random': {
                        #number of random points
                        'n_pts':                        500,
                        #interpolation method {'linear', 'cubic', 'nearest'}
                        'interp_method':                'cubic',

                        }, # <END> 'random'
'''

#the block of defined-layer parameters
DEFINED_LYR_PARAMS = '''
                    #parameters for a 'defined'-type Layer
                    'defined': {
                        #point coordinates
                        'pts':                    None,
                        #point values
                        'vals':                   None,
                        #interpolation method ('linear', 'cubic', or 'nearest')
                        'interp_method':          'cubic',

                        }, # <END> 'defined'
'''

#the block of file-layer parameters
FILE_LYR_PARAMS = '''
                    #parameters for a 'file'-type Layer
                    'file': {
                        #</path/to/file>.<ext>
                        'filepath':                     '/PATH/TO/FILE.EXT',
                        #minimum value to use to rescale the Layer to [0,1]
                        'scale_min_val':                None,
                        #maximum value to use to rescale the Layer to [0,1]
                        'scale_max_val':                None,

                        }, # <END> 'file'
'''

#the block of nlmpy-layer parameters
NLMPY_LYR_PARAMS = '''
                    #parameters for an 'nlmpy'-type Layer
                    'nlmpy': {
                        #nlmpy function to use the create this Layer
                        'function':                 'mpd',
                        #number of rows (MUST EQUAL LANDSCAPE DIMENSION y!)
                        'nRow':                     20,
                        #number of cols (MUST EQUAL LANDSCAPE DIMENSION x!)
                        'nCol':                     20,
                        #level of spatial autocorrelation in element values
                        'h':                        1,

                        }, # <END> 'nlmpy'
'''

#the block of layer-change parameters
#STRING SLOTS:
    #%i = lyr_num,
LYR_CHANGE_PARAMS = '''
            #########################################
            #### layer num. %i: change parameters ####
            #########################################

                #landscape-change event for this Layer
                'change': {
                    #end raster for event (DIM MUST EQUAL DIM OF LANDSCAPE!)
                    'end_rast':         np.zeros((20,20)),
                    #starting timestep of event
                    'start_t':          1500,
                    #ending timestep of event
                    'end_t':            2000,
                    #number of stepwise changes in event
                    'n_steps':          10

                }, # <END> 'change'
'''

#block of population params
#STRING SLOTS:
    #%s = pop_name,
    #%i = pop_num,
    #%i = pop_num,
    #%i = pop_num,
    #%s = move_params,
    #%s = genome_params,
    #%s = change_params,
    #%i = pop_num,
POP_PARAMS = '''
            #pop name (POP NAMES MUST BE UNIQUE!)
            %s: {

            #####################################
            #### pop num. %i: init parameters ####
            #####################################

                'init': {
                    #starting population size
                    'N':                200,
                    #carrying-capacity Layer name
                    'K_layer':          'layer_0',
                    }, # <END> 'init'

            #######################################
            #### pop num. %i: mating parameters ####
            #######################################

                'mating'    : {
                    #age(s) at sexual maturity (if tuple, female first)
                    'repro_age':                0,
                    #whether to assign sexes
                    'sex':                      False,
                    #ratio of males to females
                    'sex_ratio':                1/1,
                    #whether P(birth) should be weighted by parental dist
                    'distweighted_birth':       False,
                    #pop intrinsic growth rate
                    'R':                        0.5,
                    #pop intrinsic birth rate (MUST BE 0<=b<=1)
                    'b':                        0.2,
                    #expectation of distr of n offspring per mating pair
                    'n_births_distr_lambda':    1,
                    #radius of mate-search area
                    'mating_radius':            10,
                    }, # <END> 'mating'

            ##########################################
            #### pop num. %i: mortality parameters ####
            ##########################################

                'mortality'     : {
                    #maximum age
                    'max_age':                  1,
                    #min P(death) (MUST BE 0<=d_min<=1)
                    'd_min':                     0.01,
                    #max P(death) (MUST BE 0<=d_max<=1)
                    'd_max':                    0.99,
                    #width of window used to estimate local pop density
                    'density_grid_window_width':   None,
                    }, # <END> 'mortality'
%s
%s
%s
                }, # <END> pop num. %i
'''

#block for movement params
#STRING SLOTS:
    #%i = pop_num,
    #%s = move_surf_params,
MOVE_PARAMS = '''
            #########################################
            #### pop num. %i: movement parameters ####
            #########################################

                'movement': {
                    #mode of distr of movement direction
                    'direction_distr_mu':     1,
                    #concentration of distr of movement direction
                    'direction_distr_kappa':  0,
                    #mean of distr of movement distance
                    'distance_distr_mu':      0.5,
                    #variance of distr of movement distance
                    'distance_distr_sigma':   0.5,
                    #mean of distr of dispersal distance
                    'dispersal_distr_mu':     0.5,
                    #variance of distr of dispersal distance
                    'dispersal_distr_sigma':  0.5,
%s
                    },    # <END> 'movement'
'''

#block for movement-surface params
MOVE_SURF_PARAMS = '''
                    'move_surf'     : {
                        #move-surf Layer name
                        'layer':                'layer_0',
                        #whether to use mixture distrs
                        'mixture':              True,
                        #concentration of distrs
                        'vm_distr_kappa':       12,
                        } # <END> 'move_surf'
'''

#block for genome params
#STRING SLOTS:
    #%i = pop_num,
    #
    #%s = traits_params,
GENOME_PARAMS = '''
            #####################################################
            #### pop num. %i: genomic architecture parameters ####
            #####################################################

                'gen_arch': {
                    #/path/to/file.csv defining custom genomic arch
                    'gen_arch_file':            %s,
                    #num of loci
                    'L':                        100,
                    #num of chromosomes
                    'l_c':                      [75, 25],
                    #genome-wide per-base neutral mut rate (0 to disable)
                    'mu_neut':                  1e-9,
                    #genome-wide per-base deleterious mut rate (0 to disable)
                    'mu_delet':                 0,
                    #shape of distr of deleterious effect sizes
                    'delet_alpha_distr_shape':      0.2,
                    #scale of distr of deleterious effect sizes
                    'delet_alpha_distr_scale':      0.2,
                    #alpha of distr of recomb rates
                    'r_distr_alpha':            0.5,
                    #beta of distr of recomb rates
                    'r_distr_beta':             15e9,
                    #whether loci should be dominant (for allele '1')
                    'dom':                      False,
                    #whether to allow pleiotropy
                    'pleiotropy':               False,
                    #custom fn for drawing recomb rates
                    'recomb_rate_custom_fn':    None,
                    #number of recomb paths to hold in memory
                    'n_recomb_paths_mem': int(1e4),
                    #total number of recomb paths to simulate
                    'n_recomb_paths_tot':           int(1e5),
                    #whether to save mutation logs
                    'mut_log':                  False,
%s
                    }, # <END> 'gen_arch'
'''

#block for traits params
#STRING SLOTS:
    #%s = multi_trait_params,
TRTS_PARAMS = '''
                    'traits': {
%s

    #### NOTE: Individual Traits' sections can be copy-and-pasted (and
    #### assigned distinct keys and names), to create additional Traits.


                        }, # <END> 'traits'
'''

#block for trait params
#STRING SLOTS:
    #%i = trait_num,
    #%s = trait_num,
    #%i = trait_num,
TRT_PARAMS = '''
                        ###########################
                        ####trait %i parameters ####
                        ###########################
                        #trait name (TRAIT NAMES MUST BE UNIQUE!)
                        %s: {
                            #trait-selection Layer name
                            'layer':                'layer_0',
                            #polygenic selection coefficient
                            'phi':                  0.05,
                            #number of loci underlying trait
                            'n_loci':               10,
                            #mutation rate at loci underlying trait
                            'mu':                   1e-9,
                            #mean of distr of effect sizes
                            'alpha_distr_mu' :      0,
                            #variance of distr of effect size
                            'alpha_distr_sigma':    0.5,
                            #curvature of fitness function
                            'gamma':                1,
                            #whether the trait is universally advantageous
                            'univ_adv':             False
                            }, # <END> trait %i
'''

#block for pop_change params
#STRING SLOTS:
    #%i = pop_num,
    #%s = dem_and-or_param_change_params_str,
POP_CHANGE_PARAMS = '''
            #######################################
            #### pop num. %i: change parameters ####
            #######################################

                'change': {
%s
                        } # <END> 'change'
'''

#block for a series of demographic-change events
#STRING SLOTS:
    #%s = multi_dem_change_event_params,
POP_DEM_CHANGE_EVENTS_PARAMS = '''
                    #################################
                    # demographic change parameters #
                    #################################
                    'dem': {
%s


    #### NOTE: Individual demographic change events' sections can be
    #### copy-and-pasted (and assigned distinct keys and names), to create
    #### additional events.


                        }, # <END> 'dem'
'''

#block for parameters for a single demographic-change event
#STRING SLOTS:
    #%i = dem_change_event_num,
    #%i = dem_change_event_num,
POP_DEM_CHANGE_EVENT_PARAMS = '''
                        %i: {
                            #kind of event {'monotonic', 'stochastic',
                                                #'cyclical', 'custom'}
                            'kind':             'monotonic',
                            #starting timestep
                            'start':            49,
                            #ending timestep
                            'end':              99,
                            #rate, for monotonic change
                            'rate':             1.02,
                            #interval of changes, for stochastic change
                            'interval':         1,
                            #distr, for stochastic change {'uniform', 'normal'}
                            'distr':            'uniform',
                            #num cycles, for cyclical change
                            'n_cycles':         10,
                            #min & max sizes, for stochastic & cyclical change
                            'size_range':       (0.5, 1.5),
                            #list of timesteps, for custom change
                            'timesteps':        [50, 90, 95],
                            #list of sizes, for custom change
                            'sizes':            [2, 5, 0.5],
                            } # <END> event %i

'''

#block for a series of life-history parameter-change events
POP_PARAM_CHANGE_PARAMS = '''
                    ##################################
                    # life-history change parameters #
                    ##################################
                    'life_hist': {
                        #life-history parameter to change
                        '<life_hist_param>': {
                            #list of timesteps
                            'timesteps':        [],
                            #list of values
                            'vals':             [],
                                }


    #### NOTE: Individual life-history paramter change events' sections can be
    #### copy-and-pasted (and assigned distinct keys and names), to create
    #### additional events.


                            }, # <END> 'life_hist'
'''

#block for model iterations params
ITS_PARAMS = '''
        ###############################
        #### iterations parameters ####
        ###############################
        'its': {
            #num iterations
            'n_its': 3,
            #whether to randomize Landscape each iteration
            'rand_landscape':    False,
            #whether to randomize Community each iteration
            'rand_comm':    False,
            #whether to burn in each iteration
            'repeat_burn':  False,
            }, # <END> 'iterations'
'''

#block for model data-collection params
DATA_PARAMS = '''
        ####################################
        #### data-collection parameters ####
        ####################################
        'data': {
            'sampling': {
                #sampling scheme {'all', 'random', 'point', 'transect'}
                'scheme':               'random',
                #sample size at each point, for point & transect sampling
                'n':                    250,
                #coords of collection points, for point sampling
                'points':               None,
                #coords of transect endpoints, for transect sampling
                'transect_endpoints':   None,
                #num points along transect, for transect sampling
                'n_transect_points':    None,
                #collection radius around points, for point & transect sampling
                'radius':               None,
                #when to collect data
                'when':                 None,
                #whether to save current Layers when data is collected
                'include_landscape':         False,
                #whether to include fixed loci in VCF files
                'include_fixed_sites':  False,
                },
            'format': {
                #format for genetic data {'vcf', 'fasta'}
                'gen_format':           ['vcf', 'fasta'],
                #format for vector geodata {'csv', 'shapefile', 'geojson'}
                'geo_vect_format':      'csv',
                #format for raster geodata {'geotiff', 'txt'}
                'geo_rast_format':      'geotiff',
                },
            }, #<END> 'data'
'''

#block for model stats-calculation params
STATS_PARAMS = '''
        #####################################
        #### stats-collection parameters ####
        #####################################
        'stats': {
            #pop size at time t
            'Nt': {
                #whether to calculate
                'calc':     True,
                #calculation frequency (in timesteps)
                'freq':     1,
                },
            #heterozgosity
            'het': {
                #whether to calculate
                'calc':     True,
                #calculation frequency (in timesteps)
                'freq':     5,
                #whether to calculate as pop mean
                'mean': False,
                },
            #minor allele freq
            'maf': {
                #whether to calculate
                'calc':     True,
                #calculation frequency (in timesteps)
                'freq':     5,
                },
            #mean fitness
            'mean_fit': {
                #whether to calculate
                'calc':     True,
                #calculation frequency (in timesteps)
                'freq':     5,
                },
            #linkage disequilibirum
            'ld': {
                #whether to calculate
                'calc':     False,
                #calculation frequency (in timesteps)
                'freq':     100,
                },
            }, # <END> 'stats'
'''

######################################
# -----------------------------------#
# CLASSES ---------------------------#
# -----------------------------------#
######################################

#a _DynAttrDict dict class with k:v pairs as dynamic attributes
class _DynAttrDict(dict):
    def __getattr__(self, item):
        return self[item]
    def __dir__(self):
        return super().__dir__() + [str(k) for k in self.keys()]
    def __deepcopy__(self, memo):
        return _DynAttrDict(copy.deepcopy(dict(self)))

#a ParametersDict class (which is just a recursion the _DynAttrDict over the
#whole params dict, to make all its levels dicts with dynamic attributes, 
#i.e indexable by dot notation and responsive to tab completion)
class ParametersDict(_DynAttrDict):
    def __init__(self, params):
        params_dict = _make_parameters_dict(params)
        self.update(params)

    #re-enable deepcopy, because the class inherits from a dict
    def __deepcopy__(self, memo):
        return ParametersDict(copy.deepcopy(dict(self)))

    #define the __str__ and __repr__ special methods
    def __str__(self):
        #get a string representation of the class
        type_str = str(type(self))
        #get the model name str
        name_str = "Model name:%s%s"
        name_str = name_str % (_sr_._get_spacing(name_str), self.model.name)
        #concatenate the strings
        tot_str = '\n'.join([type_str, name_str])
        return tot_str

    def __repr__(self):
       repr_str = self.__str__()
       return repr_str


######################################
# -----------------------------------#
# FUNCTIONS -------------------------#
# -----------------------------------#
######################################

#function to create the lyrs-params section of a params file
def _make_lyrs_params_str(lyrs=1):
    #create an empty list, to be filled with one params string per lyr
    lyrs_params_list = []
    #if lyrs is an integer, create a string of identical parameter sections
    if type(lyrs) is int:
        #assert that it's an integer greater than 0
        assert lyrs > 0, ("The number of Layers to be created must be a "
        "positive integer.")
        #for each lyr
        for i in range(lyrs):
            #use lyr-type 'random'
            type_params = RAND_LYR_PARAMS
            #add no change params (i.e. a zero-length string)
            change_params = ''
            #create the lyr_params str
            lyr_params_str = LYR_PARAMS % ("'layer_%i'" % i, i,
                                               type_params, change_params, i)
            #append it to the list
            lyrs_params_list.append(lyr_params_str)

    #or if lyrs is a list of dicts, then create individually customized
    #params sections for each Layer
    elif type(lyrs) is list:
        #assert that each item in the list is a dict
        assert False not in [type(item) is dict for item in lyrs], ("All "
            "items in the argument 'layers' must be of type dict if it is "
            "provided as a list.")
        assert False not in [type(item) is dict for item in lyrs], ("If the "
            "'layers' argument is a list then it must contain only "
            "objects of type dict.")
        #create lookup dicts for the params strings for different lyr params
        #sections
        lyr_type_params_str_dict = {'random': RAND_LYR_PARAMS,
                                      'defined': DEFINED_LYR_PARAMS,
                                      'file': FILE_LYR_PARAMS,
                                      'nlmpy': NLMPY_LYR_PARAMS,
                                     }
        lyr_change_params_str_dict = {True: LYR_CHANGE_PARAMS,
                                        False: ''}
        #for each lyr
        for i, lyr_dict in enumerate(lyrs):
            #assert that the 'type' value is valid
            if 'type' in [*lyr_dict]:
                assert lyr_dict['type'] in ['random', 'defined', 'file',
                    'nlmpy'], ("The value provided for the 'type' of Layer "
                    "%i is invalid. Valid values include: ['random', "
                    "'defined', 'file', 'nlmpy'].") % i
                #get the type params for this lyr
                lyr_type = lyr_dict['type']
            else:
                lyr_type = 'random'
            type_params = lyr_type_params_str_dict[lyr_type]
            #assert that the 'change' value is valid
            if 'change' in [*lyr_dict]:
                assert type(lyr_dict['change']) is bool, ("The value "
                    "provided for the 'change' value of Layer %i is invalid. "
                    "Value must be a boolean.") % i
                #get the change params for this lyr
                lyr_change = lyr_dict['change']
            else:
                lyr_change = False
            change_params = lyr_change_params_str_dict[lyr_change]
            if change_params != '':
                change_params = change_params % i
            #create the lyr_params str for this Layer
            lyr_params_str = LYR_PARAMS % ("'layer_%i'" % i, i,
                                               type_params, change_params, i)
            #append it to the list
            lyrs_params_list.append(lyr_params_str)

    #join the whole list into one str
    lyrs_params_str = '\n'.join(lyrs_params_list)
    return lyrs_params_str


#function to create the pops-params section of a params file
def _make_populations_params_str(populations=1):
    #create an empty list, to be filled with one params string per pop
    pops_params_list = []
    #if pops is an integer, create a string of identical parameter sections
    if type(populations) is int:
        #assert that it's an integer greater than 0
        assert populations > 0, ("The number of Populations to be created "
        "must be a positive integer.")
                #for each pop
        for i in range(populations):
            #use movement params, but with no movement surface (i.e.
            #string-format with a zero-length str)
            move_params = MOVE_PARAMS % (i, '')
            #use genome params, but with no traits (i.e. string-format with a
            #zero-length str)
            genome_params = GENOME_PARAMS % (i, 'None', '')
            #add no change params
            change_params = ''
            #create the pop_params str
            pop_params_str = POP_PARAMS % ("'pop_%i'" % i, i, i, i,
                            move_params, genome_params, change_params, i)
            #append to the pops_params_list
            pops_params_list.append(pop_params_str)

    #or if populations is a list of dicts, then create individually customized
    #params sections for each Population
    elif type(populations) is list:
        #create an empty list, to which any populations who should have custom
        #gen-arch files created will be appended
        #assert that each item in the list is a dict
        assert False not in [type(item) is dict for item in populations], ("If"
            " the 'populations' argument is a list then it must contain only "
            "objects of type dict.")
        #create a lookup dict for the params strings for different pop params
        #sections
        params_str_dict = {'move': {True: MOVE_PARAMS},
                        'move_surf': {True: MOVE_SURF_PARAMS},
                        'genome': {True: GENOME_PARAMS},
                        'change': {True: POP_CHANGE_PARAMS},
                        'dem_change': {True: POP_DEM_CHANGE_EVENT_PARAMS},
                        'dem_events': {True: POP_DEM_CHANGE_EVENTS_PARAMS},
                        'param_change': {True: POP_PARAM_CHANGE_PARAMS},

                            }
        [v.update({False: ''}) for v in params_str_dict.values()]
        #for each pop
        for i, pop_dict in enumerate(populations):
            #assert that the argument values are valid
            bool_args= ['movement', 'movement_surface', 'genomes',
                                                        'parameter_change']
            int_args = ['n_traits', 'demographic_change']
            for arg in bool_args:
                if arg in [*pop_dict]:
                    assert type(pop_dict[arg]) is bool, ("The '%s' key in "
                        "each Population's dictionary must contain a "
                        "boolean value. But dict number %i in the "
                        "'population' argument contains a non-boolean "
                                                        "value.") % (arg, i)
            for arg in int_args:
                if arg in [*pop_dict]:
                    assert type(pop_dict[arg]) is int, ("The '%s' "
                        "key in each Population's dictionary must contain an "
                        "integer value. But dict number %i in the "
                        "'populations' argument contains a non-integer "
                        "value:\n\n\t" "'%s': %s ") % (arg, i, arg,
                                                            str(pop_dict[arg]))
                    int_arg_str_fmt_dict = {'n_traits':'Traits',
                            'demographic_change': 'demographic change events'}
                    assert pop_dict[arg] > 0, ("The number of %s to "
                                    "be created must be a positive "
                                    "integer.") % (int_arg_str_fmt_dict[arg])
            #get the movement surf and movement params, if required
            #NOTE: check if pop_dict['movement'] is True, so that poorly
            #entered arguments (i.e. 'movement': False,
            #'movement_surface':True) don't inadvertently try to format 
            #a zero-length string with the movement-surface params str
            if 'movement' in [*pop_dict] and pop_dict['movement']:
                if 'movement_surface' in [*pop_dict]:
                    ms_arg = pop_dict['movement_surface']
                    move_surf_params = params_str_dict['move_surf'][ms_arg]
                else:
                    move_surf_params = ''
                move_params = params_str_dict['move'][pop_dict['movement']]
                move_params = move_params % (i, move_surf_params)
            #or get empty str
            else:
                move_params = ''
            #get the genome params, if required
            if 'genomes' in [*pop_dict] and pop_dict['genomes'] in [True,
                                                                    'custom']:
                #if this population should have a custom gen_arch_file made
                if ('custom_genomic_architecture' in [*pop_dict] and
                    pop_dict['custom_genomic_architecture']):
                    gen_arch_file_str = ("'%%%%GEN_ARCH_FILE_STR%%%%_pop-%i_"
                                                            "gen_arch.csv'")
                    gen_arch_file_str = gen_arch_file_str % i
                    #make a tmp gen_arch_file for this pop
                    tmp_gen_arch_filename = '%i_%s.tmp' % (i,
                        str(np.random.randint(0, 10000)).zfill(5))
                    _make_custom_genomic_architecture_file(
                                                    tmp_gen_arch_filename)
                else:
                    gen_arch_file_str = 'None'
                #if this population's genomes should have traits
                if 'n_traits' in [*pop_dict]:
                    #get a list of params strings of length equal
                    #to the number of traits it should have
                    trait_params_list = []
                    for trt in range(pop_dict['n_traits']):
                        trait_params = TRT_PARAMS % (trt,
                                                "'trait_%i'" % trt, trt)
                        trait_params_list.append(trait_params)
                    #get the traits_params_str
                    traits_params = TRTS_PARAMS
                    #join the list into a single str and insert it into the
                    #traits_params_str
                    traits_params = traits_params % ''.join(trait_params_list)
                else:
                    traits_params = ''
                genome_params = params_str_dict['genome'][pop_dict['genomes']]
                genome_params = genome_params % (i, gen_arch_file_str,
                                                                traits_params)
            #or get empty str
            else:
                genome_params = ''
            #get the pop-change params (if either dem or param changes are
            #required
            if (('demographic_change' in [*pop_dict]
                 and pop_dict['demographic_change'])
                or ('parameter_change' in [*pop_dict]
                    and pop_dict['parameter_change'])):
                #create an empty string to tack either/both section(s) onto
                change_series_str = ''
                #tack on the dem-change events params str, if required
                if 'demographic_change' in [*pop_dict]:
                    dem_change_event_params_list = []
                    for n in range(pop_dict['demographic_change']):
                        params_str = params_str_dict['dem_change'][True]
                        dem_change_event_params_list.append(
                                                        params_str % (n, n))
                    events_series = ''.join(dem_change_event_params_list)
                    events_params_str = params_str_dict['dem_events'][True]
                    events_params_str = events_params_str % events_series
                    change_series_str = change_series_str + events_params_str
                #tack on the param-change params, if required
                if 'parameter_change' in [*pop_dict]:
                    param_change_arg = pop_dict['parameter_change']
                    param_change_params_str = (
                    params_str_dict['param_change'][param_change_arg])
                    events_params_str=events_params_str+param_change_params_str
                change_params = params_str_dict['change'][True]
                change_params = change_params % (i, events_params_str)
            #or get empty str
            else:
                change_params = ''
            #get the overall pop params str for this pop
            pop_params_str = POP_PARAMS % ("'pop_%i'" % i, i, i, i,
                            move_params, genome_params, change_params, i)
            #append to the pops_params_list
            pops_params_list.append(pop_params_str)
    #join the whole list into one str
    pops_params_str = ''.join(pops_params_list)
    return pops_params_str


#function to create the data- and  stats-params sections of params file
#TODO: Add option for the argument to _make_parameters_file() to list the stats 
#to be calculated??
def _make_model_params_strs(section, arg=None):
    #assert the value of arg is valid
    assert arg in [True, False, None], ("The value of the '%s' argument "
        "provided for the model is not valid values. Value must be either a "
        "boolean or None.") % section
    if arg in [False, None]:
        return ''
    else:
        if section == 'data':
            return DATA_PARAMS
        elif section == 'stats':
            return STATS_PARAMS


#function to create a default params file, to be filled in by the user
def _make_parameters_file(filepath=None, layers=1, populations=1, data=None,
        stats=None):
    '''<see docstring in gnx.make_parameters_file>'''
    lyrs_params_str = _make_lyrs_params_str(lyrs = layers)
    pops_params_str= _make_populations_params_str(populations = populations)
    data_params_str = _make_model_params_strs('data', arg = data)
    stats_params_str = _make_model_params_strs('stats', arg = stats)
    #TODO DECIDE IF THIS SHOULD BE MADE OPTIONAL IN SOME WAY
    its_params_str = ITS_PARAMS
    #get the filepath
    if filepath is None:
        #get a string of the date and time
        datetime_str = time.strftime("%d-%m-%Y_%H:%M:%S", time.localtime())
        #and add a default filename
        filepath = 'GEONOMICS_params_%s.py' % datetime_str
    #check the filepath is pointed somewhere valid
    assert (os.path.isdir(os.path.split(filepath)[0])
            or os.path.split(filepath)[0] is ''), ("The filepath to which to "
            "write the parameters file does not point to a valid directory.")
    #coerce the file to a .py extension if it is not already provided
    filepath = os.path.splitext(filepath)[0] + '.py'
    #create the full params-file string
    file_str = PARAMS % (os.path.split(filepath)[1], lyrs_params_str,
        pops_params_str, its_params_str, data_params_str, stats_params_str)

    #add the gen_arch_file name and then create the files, if needed
    if re.search('%%GEN_ARCH_FILE_STR%%', file_str):
        #get the file prefix
        gen_arch_file_prefix = os.path.splitext(os.path.split(filepath)[1])[0]
        #rename the tmp files that were created
        tmp_files = [f for f in os.listdir('.') if (
            os.path.splitext(f)[1] == '.tmp')]
        for tmp_file in tmp_files:
            os.rename(tmp_file, gen_arch_file_prefix +
                '_pop-%s_gen_arch.csv' % (tmp_file.split('_')[0]))
        #replace the standin pattern with the file prefix
        file_str = re.sub('%%GEN_ARCH_FILE_STR%%', gen_arch_file_prefix,
                                                                file_str)

    #write the file_str to a "GEONOMICS_params_<datetime>.py" file
    with open(filepath, 'w') as f:
        f.write(file_str)


#function to recurse over the params dictionary 
#and return it as a Parameters_Dict object (i.e. a
#dict with k:v pairs as dynamic attributes)
def _make_parameters_dict(params):
    for k, v in params.items():
        method_names = ['clear', 'copy', 'fromkeys', 'get', 'items', 'keys',
                        'pop', 'popitem', 'setdefault', 'update', 'values']
        assert k not in method_names, ('The key "%s" in your params '
            'file is disallowed because it would clobber a Python method. '
            'Please edit name.\n\tNOTE: It holds the following value:'
            '\n%s' % (str(k), str(v)))
        if isinstance(v, dict):
            params[k] = _make_parameters_dict(params[k])
    params = _DynAttrDict(params)
    return(params)


#read a params file and return a ParametersDict object
def _read(filepath):
    #get the filename (minus path and extension) as the model name
    name = os.path.splitext(os.path.split(filepath)[-1])[0]
    #create a namespace to read the params dict into
    ns = {}
    #read and execute the file (to create a plain dict called 'params')
    exec(open(filepath, 'r').read(), ns)
    #get the params object from the namespace ns
    params = ns['params']
    #turn the params dict into a ParametersDict object
    params = ParametersDict(params)
    #set the model's name
    params.model['name'] = name
    return(params)


#create a an empty custom gen-arch file for a population 
#(will be called if 'genomes':'custom' is a k:v pair in a 
#population dict fed into _make_paramters_file's 'populations' argument
def _make_custom_genomic_architecture_file(filepath):
    #create the dataframe for the CSV file
    cols = ('locus', 'p', 'dom', 'r', 'trait', 'alpha')
    row0 = ([0], [np.nan], [np.nan], [0.5], [np.nan], [np.nan])
    df_dict = dict(zip(cols, row0))
    df = pd.DataFrame.from_dict(df_dict)
    #write it to file, without the index
    df.to_csv(filepath, index = False)

