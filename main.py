#!/usr/bin/python
# main.py

'''
##########################################

Module name:          main


Module contains:
                      - the Geonomics main module, containing the key, 
                        highest-level functions the common user would need


Author:               Drew Ellison Hart
Email:                drew.hart@berkeley.edu
Github:               URL
Start date:           07-06-18
Documentation:        URL


##########################################
'''

#geonomics imports
from sim import model
from sim import params as par

#other imports
import re
import os, sys
import numpy as np
import pandas as pd

######################################
# -----------------------------------#
# CLASSES ---------------------------#
# -----------------------------------#
######################################


######################################
# -----------------------------------#
# FUNCTIONS -------------------------#
# -----------------------------------#
######################################

#wrapper around params.make_parameters_file
#TODO
def make_parameters_file(filepath=None, scapes=1, populations=1, data=None,
                         stats=None, seed=None):
    '''
    Write a new template params file (to then be filled in by the user).

    Arguments:
        'scapes' can take the following values:
            int:
                Will add sections for the stipulated number of Scapes, each with
                default settings:
                    - parameters for creating Scapes of type 'random' (i.e.
                      Scapes that will be generated by interpolation from
                      randomly valued random points)
                    - no ScapeChanger parameters
            [dict, ..., dict]:
                Each dict should be of the form:
                    {'type':   <one value from ['random', 'defined', 'file']>,
                     'change': bool
                     }
                This will add one section of Scape paramters, of the given type
                and with change parameters as indicated, for each dict in the 
                list.

        'populations' can take the following values:
            int:
                Will add sections for the stipulated number of Populations, each
                with default settings:
                    - parameters for movement without a MovementSurface
                    - parameters for a GenomicArchitecture with 0 
                      Traits (i.e. with only neutral loci)
                    - no Islands paramters
                    - no PopulationChanger parameters
            [dict, ..., dict]:
                Each dict should contain at least one argument from among the
                following:
                    {'movement':            bool,
                     'movement_surface':    bool,
                     'genomes':             bool,
                     'n_traits':            int,
                     'islands':             bool,
                     'demographic_change':  int,
                     'parameter_change':    bool,
                     }
                This will add one section of Population parameters, customized
                as indicated, for each dict in the list.

        'data' can take the following values:
            None, False:
                Will not add a section for parameterizing data to be collected.
                No DataCollector will be created for the Model object made from
                the resulting parameters file, and no data will be collected
                during the model runs.
            True:
                Will add a section that can be used to parameterize which
                data will be collected during the model runs, when, and what
                file formats will be used to write it to disk.
                (This which will be managed by the model's DataCollector
                object.)

        'stats' can take the following values:
            None, False:
                Will not add a section for parameterizing the statistics to be
                calculated. No StatsCollector will be created for the Model
                object made from the resulting parameters file, and no
                statistics will be calculated during the model runs.
            True:
                Will add a section that can be used to parameterize which
                statistics will be calculated during the model runs, and when.
                (This will be managed by the model's StatsCollector object.)

        'seed' can take the following values:
            None, False:
                Will not add a section for parameterizing how the random number
                generators are seeded, hence generators will be seeded at
                random and results will be unreproducible.
            True:
                Will add a section for parameterizing how the random number
                generators are seeded, so that results will be reproducible.
    '''
    par.make_parameters_file(filepath = filepath, scapes = scapes,
                                populations = populations, data = data,
                                stats = stats, seed = seed)

#wrapper around params.read
def read_params(params_filepath):
    params = par.read(params_filepath)
    return(params)


#function to create a model from a ParametersDict object
def make_model(params, verbose=False):
    #TODO: ASSERT THAT params is either a ParametersDict object 
    #OR a filepath (and if so, that it can be turned into a ParametersDict object)
    if type(params) is str:
        try:
            params = read_params(params)
        except Exception as e:
            raise ValueError(("Failed to read the parameters file at the "
                "filepath that was provided. The following error was raised: "
                "\n\t%s\n\n") % e)
    elif type(params) == "<class '__main__.Parameters_Dict'>":
        pass
    try:
        name = params.model.name
        mod = model.Model(name, params, verbose=verbose)
        return(mod)
    except Exception as e:
            raise ValueError(("Failed to create a Model object from the "
                "ParametersDict object that was provided. "
                "The following error was raised: \n\t%s\n\n") % e)


